//
// File generated by rootcint at Mon Nov 28 09:43:56 2011

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME rbguidIHistDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "HistDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HistMaker HistMaker;
      #else
      class HistMaker  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HistMaker() throw() {};
         ::TQObjSender fQObject; //
         ::TGListView* histlist; //
         ::TGLVContainer* cont; //
         ::TGMenuBar* xmenubar; //
         ::TGMenuBar* ymenubar; //
         ::TGMenuBar* zmenubar; //
         ::TGPopupMenu* xmenu; //
         ::TGPopupMenu* ymenu; //
         ::TGPopupMenu* zmenu; //
         ::TGHorizontalFrame* top; //
         ::TGHorizontalFrame* fbuttons; //
         ::TGHorizontalFrame* fcbuttons; //
         ::TGTextButton* loadFile; //
         ::TGTextButton* saveFile; //
         ::TGTextButton* create; //
         ::TGLayoutHints* fL3; //
         ::TGLayoutHints* fL4; //
         ::TGLayoutHints* fL5; //
         ::TGGroupFrame* deffile; //
         ::TGTextEntry* xptext; //
         ::TGTextEntry* yptext; //
         ::TGTextEntry* zptext; //
         ::TGTextEntry* binxtext; //
         ::TGTextEntry* binytext; //
         ::TGTextEntry* binztext; //
         ::TGTextEntry* loxtext; //
         ::TGTextEntry* loytext; //
         ::TGTextEntry* loztext; //
         ::TGTextEntry* hixtext; //
         ::TGTextEntry* hiytext; //
         ::TGTextEntry* hiztext; //
         ::TGTextEntry* histnametext; //
         ::TGTextEntry* tgate; //
         vector< ::string >* namesx; //
         vector< ::string >* namesy; //
         vector< ::string >* namesz; //
         map< Int_t, ::string > fInfo; //
         int htype; //
         int hfilloption; //
         int bins[3]; //
         bool invalide; //
         double low[3]; //
         double high[3]; //
         string px; //
         string py; //
         string pz; //
         string hname; //
         string hgate; //
         ::TGMainFrame* fMain; //
         ::HistViewer* fView; //
         ::TH1DMap* h1ds; //1d histograms
         ::TH2DMap* h2ds; //2d histograms
         ::TH3DMap* h3ds; //3d histograms
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HistViewer HistViewer;
      #else
      class HistViewer  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HistViewer() throw() {};
         ::TQObjSender fQObject; //
         ::TGMainFrame* fMain; //main window
         ::TGTab* fTab; //controls the tabs
         vector< ::TGCompositeFrame* > tabs; //
         vector< ::TRootEmbeddedCanvas* > ecanvases; //
         vector< ::string > availablehists; //
         int cindex; //current tab / canvas index
         ::HistMaker* hmaker; //
         char drawoption[500]; //
         ::TFile* infile; //possible input file
         ::TTree* intree; //possible input tree
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TH1D_SF TH1D_SF;
      #else
      class TH1D_SF  {
         public:
         //friend XX;
         ::TBranchElement* dataxp; //pointer to where the data is coming from to fill
         int ix; //index for use in GetValue function (mainly
         double* gate; //pointer to TTreeFormula result (result of a gate
         ::TH1D* hist; //histogram to be filled. I chose to have a data
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TH2D_SF TH2D_SF;
      #else
      class TH2D_SF  {
         public:
         //friend XX;
         ::TBranchElement* dataxp; //pointer to where the data is coming from to fill
         ::TBranchElement* datayp; //pointer to where the data is coming from to fill
         int ix; //index for use in GetValue function (mainly
         int iy; //index for use in GetValue function (mainly
         double* gate; //pointer to TTreeFormula result (result of a gate
         ::TH2D* hist; //histogram to be filled. I chose to have a data
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TH3D_SF TH3D_SF;
      #else
      class TH3D_SF  {
         public:
         //friend XX;
         ::TBranchElement* dataxp; //pointer to where the data is coming from to fill
         ::TBranchElement* datayp; //pointer to where the data is coming from to fill
         ::TBranchElement* datazp; //pointer to where the data is coming from to fill
         int ix; //index for use in GetValue function (mainly
         int iy; //index for use in GetValue function (mainly
         int iz; //index for use in GetValue function (mainly
         double* gate; //pointer to TTreeFormula result (result of a gate
         ::TH3D* hist; //histogram to be filled. I chose to have a data
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TGLVEntry_mod TGLVEntry_mod;
      #else
      class TGLVEntry_mod  :  public ::TGLVEntry {
         public:
         //friend XX;
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void HistMaker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HistMaker_Dictionary();
   static void delete_HistMaker(void *p);
   static void deleteArray_HistMaker(void *p);
   static void destruct_HistMaker(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HistMaker*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HistMaker) == sizeof(::ROOT::Shadow::HistMaker));
      ::HistMaker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HistMaker),0);
      static ::ROOT::TGenericClassInfo 
         instance("HistMaker", "/Users/gchristian/soft/develop/rootbeer/rbgui/HistMaker.h", 108,
                  typeid(::HistMaker), DefineBehavior(ptr, ptr),
                  &HistMaker_ShowMembers, &HistMaker_Dictionary, isa_proxy, 4,
                  sizeof(::HistMaker) );
      instance.SetDelete(&delete_HistMaker);
      instance.SetDeleteArray(&deleteArray_HistMaker);
      instance.SetDestructor(&destruct_HistMaker);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HistMaker*)
   {
      return GenerateInitInstanceLocal((::HistMaker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HistMaker*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HistMaker_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::HistMaker*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void HistViewer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HistViewer_Dictionary();
   static void delete_HistViewer(void *p);
   static void deleteArray_HistViewer(void *p);
   static void destruct_HistViewer(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HistViewer*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HistViewer) == sizeof(::ROOT::Shadow::HistViewer));
      ::HistViewer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HistViewer),0);
      static ::ROOT::TGenericClassInfo 
         instance("HistViewer", "/Users/gchristian/soft/develop/rootbeer/rbgui/HistViewer.h", 36,
                  typeid(::HistViewer), DefineBehavior(ptr, ptr),
                  &HistViewer_ShowMembers, &HistViewer_Dictionary, isa_proxy, 4,
                  sizeof(::HistViewer) );
      instance.SetDelete(&delete_HistViewer);
      instance.SetDeleteArray(&deleteArray_HistViewer);
      instance.SetDestructor(&destruct_HistViewer);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HistViewer*)
   {
      return GenerateInitInstanceLocal((::HistViewer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HistViewer*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HistViewer_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::HistViewer*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TH1D_SF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void TH1D_SF_Dictionary();
   static void *new_TH1D_SF(void *p = 0);
   static void *newArray_TH1D_SF(Long_t size, void *p);
   static void delete_TH1D_SF(void *p);
   static void deleteArray_TH1D_SF(void *p);
   static void destruct_TH1D_SF(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TH1D_SF*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TH1D_SF) == sizeof(::ROOT::Shadow::TH1D_SF));
      ::TH1D_SF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TH1D_SF),0);
      static ::ROOT::TGenericClassInfo 
         instance("TH1D_SF", "/Users/gchristian/soft/develop/rootbeer/rbgui/TH1D_SF.h", 7,
                  typeid(::TH1D_SF), DefineBehavior(ptr, ptr),
                  &TH1D_SF_ShowMembers, &TH1D_SF_Dictionary, isa_proxy, 4,
                  sizeof(::TH1D_SF) );
      instance.SetNew(&new_TH1D_SF);
      instance.SetNewArray(&newArray_TH1D_SF);
      instance.SetDelete(&delete_TH1D_SF);
      instance.SetDeleteArray(&deleteArray_TH1D_SF);
      instance.SetDestructor(&destruct_TH1D_SF);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TH1D_SF*)
   {
      return GenerateInitInstanceLocal((::TH1D_SF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TH1D_SF*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TH1D_SF_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TH1D_SF*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TH2D_SF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void TH2D_SF_Dictionary();
   static void *new_TH2D_SF(void *p = 0);
   static void *newArray_TH2D_SF(Long_t size, void *p);
   static void delete_TH2D_SF(void *p);
   static void deleteArray_TH2D_SF(void *p);
   static void destruct_TH2D_SF(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TH2D_SF*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TH2D_SF) == sizeof(::ROOT::Shadow::TH2D_SF));
      ::TH2D_SF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TH2D_SF),0);
      static ::ROOT::TGenericClassInfo 
         instance("TH2D_SF", "/Users/gchristian/soft/develop/rootbeer/rbgui/TH2D_SF.h", 7,
                  typeid(::TH2D_SF), DefineBehavior(ptr, ptr),
                  &TH2D_SF_ShowMembers, &TH2D_SF_Dictionary, isa_proxy, 4,
                  sizeof(::TH2D_SF) );
      instance.SetNew(&new_TH2D_SF);
      instance.SetNewArray(&newArray_TH2D_SF);
      instance.SetDelete(&delete_TH2D_SF);
      instance.SetDeleteArray(&deleteArray_TH2D_SF);
      instance.SetDestructor(&destruct_TH2D_SF);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TH2D_SF*)
   {
      return GenerateInitInstanceLocal((::TH2D_SF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TH2D_SF*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TH2D_SF_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TH2D_SF*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TH3D_SF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void TH3D_SF_Dictionary();
   static void *new_TH3D_SF(void *p = 0);
   static void *newArray_TH3D_SF(Long_t size, void *p);
   static void delete_TH3D_SF(void *p);
   static void deleteArray_TH3D_SF(void *p);
   static void destruct_TH3D_SF(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TH3D_SF*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TH3D_SF) == sizeof(::ROOT::Shadow::TH3D_SF));
      ::TH3D_SF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TH3D_SF),0);
      static ::ROOT::TGenericClassInfo 
         instance("TH3D_SF", "/Users/gchristian/soft/develop/rootbeer/rbgui/TH3D_SF.h", 7,
                  typeid(::TH3D_SF), DefineBehavior(ptr, ptr),
                  &TH3D_SF_ShowMembers, &TH3D_SF_Dictionary, isa_proxy, 4,
                  sizeof(::TH3D_SF) );
      instance.SetNew(&new_TH3D_SF);
      instance.SetNewArray(&newArray_TH3D_SF);
      instance.SetDelete(&delete_TH3D_SF);
      instance.SetDeleteArray(&deleteArray_TH3D_SF);
      instance.SetDestructor(&destruct_TH3D_SF);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TH3D_SF*)
   {
      return GenerateInitInstanceLocal((::TH3D_SF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TH3D_SF*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TH3D_SF_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TH3D_SF*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TGLVEntry_mod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void TGLVEntry_mod_Dictionary();
   static void delete_TGLVEntry_mod(void *p);
   static void deleteArray_TGLVEntry_mod(void *p);
   static void destruct_TGLVEntry_mod(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGLVEntry_mod*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TGLVEntry_mod) == sizeof(::ROOT::Shadow::TGLVEntry_mod));
      ::TGLVEntry_mod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TGLVEntry_mod),0);
      static ::ROOT::TGenericClassInfo 
         instance("TGLVEntry_mod", "/Users/gchristian/soft/develop/rootbeer/rbgui/HistMaker.h", 90,
                  typeid(::TGLVEntry_mod), DefineBehavior(ptr, ptr),
                  &TGLVEntry_mod_ShowMembers, &TGLVEntry_mod_Dictionary, isa_proxy, 4,
                  sizeof(::TGLVEntry_mod) );
      instance.SetDelete(&delete_TGLVEntry_mod);
      instance.SetDeleteArray(&deleteArray_TGLVEntry_mod);
      instance.SetDestructor(&destruct_TGLVEntry_mod);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGLVEntry_mod*)
   {
      return GenerateInitInstanceLocal((::TGLVEntry_mod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGLVEntry_mod*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TGLVEntry_mod_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TGLVEntry_mod*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void HistMaker_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HistMaker.
      typedef ::ROOT::Shadow::HistMaker ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::HistMaker*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQObject", &sobj->fQObject);
      R__insp.InspectMember(sobj->fQObject, "fQObject.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histlist", &sobj->histlist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cont", &sobj->cont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xmenubar", &sobj->xmenubar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ymenubar", &sobj->ymenubar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zmenubar", &sobj->zmenubar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xmenu", &sobj->xmenu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ymenu", &sobj->ymenu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zmenu", &sobj->zmenu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*top", &sobj->top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fbuttons", &sobj->fbuttons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fcbuttons", &sobj->fcbuttons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*loadFile", &sobj->loadFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*saveFile", &sobj->saveFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*create", &sobj->create);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fL3", &sobj->fL3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fL4", &sobj->fL4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fL5", &sobj->fL5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*deffile", &sobj->deffile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xptext", &sobj->xptext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*yptext", &sobj->yptext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zptext", &sobj->zptext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*binxtext", &sobj->binxtext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*binytext", &sobj->binytext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*binztext", &sobj->binztext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*loxtext", &sobj->loxtext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*loytext", &sobj->loytext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*loztext", &sobj->loztext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hixtext", &sobj->hixtext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hiytext", &sobj->hiytext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hiztext", &sobj->hiztext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histnametext", &sobj->histnametext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tgate", &sobj->tgate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*namesx", &sobj->namesx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*namesy", &sobj->namesy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*namesz", &sobj->namesz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInfo", (void*)&sobj->fInfo);
      R__insp.InspectMember("map<Int_t,std::string>", (void*)&sobj->fInfo, "fInfo.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "htype", &sobj->htype);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hfilloption", &sobj->hfilloption);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bins[3]", sobj->bins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "invalide", &sobj->invalide);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "low[3]", sobj->low);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "high[3]", sobj->high);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px", (void*)&sobj->px);
      R__insp.InspectMember("string", (void*)&sobj->px, "px.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py", (void*)&sobj->py);
      R__insp.InspectMember("string", (void*)&sobj->py, "py.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz", (void*)&sobj->pz);
      R__insp.InspectMember("string", (void*)&sobj->pz, "pz.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hname", (void*)&sobj->hname);
      R__insp.InspectMember("string", (void*)&sobj->hname, "hname.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hgate", (void*)&sobj->hgate);
      R__insp.InspectMember("string", (void*)&sobj->hgate, "hgate.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMain", &sobj->fMain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fView", &sobj->fView);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*h1ds", &sobj->h1ds);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*h2ds", &sobj->h2ds);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*h3ds", &sobj->h3ds);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_HistMaker(void *p) {
      delete ((::HistMaker*)p);
   }
   static void deleteArray_HistMaker(void *p) {
      delete [] ((::HistMaker*)p);
   }
   static void destruct_HistMaker(void *p) {
      typedef ::HistMaker current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HistMaker

//______________________________________________________________________________
namespace ROOT {
   void HistViewer_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HistViewer.
      typedef ::ROOT::Shadow::HistViewer ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::HistViewer*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQObject", &sobj->fQObject);
      R__insp.InspectMember(sobj->fQObject, "fQObject.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMain", &sobj->fMain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTab", &sobj->fTab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tabs", (void*)&sobj->tabs);
      R__insp.InspectMember("vector<TGCompositeFrame*>", (void*)&sobj->tabs, "tabs.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecanvases", (void*)&sobj->ecanvases);
      R__insp.InspectMember("vector<TRootEmbeddedCanvas*>", (void*)&sobj->ecanvases, "ecanvases.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "availablehists", (void*)&sobj->availablehists);
      R__insp.InspectMember("vector<std::string>", (void*)&sobj->availablehists, "availablehists.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cindex", &sobj->cindex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmaker", &sobj->hmaker);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "drawoption[500]", sobj->drawoption);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*infile", &sobj->infile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*intree", &sobj->intree);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_HistViewer(void *p) {
      delete ((::HistViewer*)p);
   }
   static void deleteArray_HistViewer(void *p) {
      delete [] ((::HistViewer*)p);
   }
   static void destruct_HistViewer(void *p) {
      typedef ::HistViewer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HistViewer

//______________________________________________________________________________
namespace ROOT {
   void TH1D_SF_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class TH1D_SF.
      typedef ::ROOT::Shadow::TH1D_SF ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TH1D_SF*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*dataxp", &sobj->dataxp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ix", &sobj->ix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*gate", &sobj->gate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hist", &sobj->hist);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TH1D_SF(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TH1D_SF : new ::TH1D_SF;
   }
   static void *newArray_TH1D_SF(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TH1D_SF[nElements] : new ::TH1D_SF[nElements];
   }
   // Wrapper around operator delete
   static void delete_TH1D_SF(void *p) {
      delete ((::TH1D_SF*)p);
   }
   static void deleteArray_TH1D_SF(void *p) {
      delete [] ((::TH1D_SF*)p);
   }
   static void destruct_TH1D_SF(void *p) {
      typedef ::TH1D_SF current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TH1D_SF

//______________________________________________________________________________
namespace ROOT {
   void TH2D_SF_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class TH2D_SF.
      typedef ::ROOT::Shadow::TH2D_SF ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TH2D_SF*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*dataxp", &sobj->dataxp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*datayp", &sobj->datayp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ix", &sobj->ix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iy", &sobj->iy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*gate", &sobj->gate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hist", &sobj->hist);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TH2D_SF(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TH2D_SF : new ::TH2D_SF;
   }
   static void *newArray_TH2D_SF(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TH2D_SF[nElements] : new ::TH2D_SF[nElements];
   }
   // Wrapper around operator delete
   static void delete_TH2D_SF(void *p) {
      delete ((::TH2D_SF*)p);
   }
   static void deleteArray_TH2D_SF(void *p) {
      delete [] ((::TH2D_SF*)p);
   }
   static void destruct_TH2D_SF(void *p) {
      typedef ::TH2D_SF current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TH2D_SF

//______________________________________________________________________________
namespace ROOT {
   void TH3D_SF_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class TH3D_SF.
      typedef ::ROOT::Shadow::TH3D_SF ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TH3D_SF*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*dataxp", &sobj->dataxp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*datayp", &sobj->datayp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*datazp", &sobj->datazp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ix", &sobj->ix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iy", &sobj->iy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iz", &sobj->iz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*gate", &sobj->gate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hist", &sobj->hist);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TH3D_SF(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TH3D_SF : new ::TH3D_SF;
   }
   static void *newArray_TH3D_SF(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TH3D_SF[nElements] : new ::TH3D_SF[nElements];
   }
   // Wrapper around operator delete
   static void delete_TH3D_SF(void *p) {
      delete ((::TH3D_SF*)p);
   }
   static void deleteArray_TH3D_SF(void *p) {
      delete [] ((::TH3D_SF*)p);
   }
   static void destruct_TH3D_SF(void *p) {
      typedef ::TH3D_SF current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TH3D_SF

//______________________________________________________________________________
namespace ROOT {
   void TGLVEntry_mod_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class TGLVEntry_mod.
      typedef ::ROOT::Shadow::TGLVEntry_mod ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TGLVEntry_mod*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      sobj->TGLVEntry::ShowMembers(R__insp);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TGLVEntry_mod(void *p) {
      delete ((::TGLVEntry_mod*)p);
   }
   static void deleteArray_TGLVEntry_mod(void *p) {
      delete [] ((::TGLVEntry_mod*)p);
   }
   static void destruct_TGLVEntry_mod(void *p) {
      typedef ::TGLVEntry_mod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGLVEntry_mod

namespace ROOT {
   void maplEintcOstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEintcOstringgR_Dictionary();
   static void *new_maplEintcOstringgR(void *p = 0);
   static void *newArray_maplEintcOstringgR(Long_t size, void *p);
   static void delete_maplEintcOstringgR(void *p);
   static void deleteArray_maplEintcOstringgR(void *p);
   static void destruct_maplEintcOstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<int,string>*)
   {
      map<int,string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<int,string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,string>", -2, "/opt/local/lib/root/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<int,string>), DefineBehavior(ptr, ptr),
                  0, &maplEintcOstringgR_Dictionary, isa_proxy, 0,
                  sizeof(map<int,string>) );
      instance.SetNew(&new_maplEintcOstringgR);
      instance.SetNewArray(&newArray_maplEintcOstringgR);
      instance.SetDelete(&delete_maplEintcOstringgR);
      instance.SetDeleteArray(&deleteArray_maplEintcOstringgR);
      instance.SetDestructor(&destruct_maplEintcOstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<int,string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<int,string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcOstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<int,string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEintcOstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,string> : new map<int,string>;
   }
   static void *newArray_maplEintcOstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,string>[nElements] : new map<int,string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcOstringgR(void *p) {
      delete ((map<int,string>*)p);
   }
   static void deleteArray_maplEintcOstringgR(void *p) {
      delete [] ((map<int,string>*)p);
   }
   static void destruct_maplEintcOstringgR(void *p) {
      typedef map<int,string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<int,string>

namespace ROOT {
   void maplEstringcOTH1D_SFmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOTH1D_SFmUgR_Dictionary();
   static void *new_maplEstringcOTH1D_SFmUgR(void *p = 0);
   static void *newArray_maplEstringcOTH1D_SFmUgR(Long_t size, void *p);
   static void delete_maplEstringcOTH1D_SFmUgR(void *p);
   static void deleteArray_maplEstringcOTH1D_SFmUgR(void *p);
   static void destruct_maplEstringcOTH1D_SFmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,TH1D_SF*>*)
   {
      map<string,TH1D_SF*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,TH1D_SF*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,TH1D_SF*>", -2, "/opt/local/lib/root/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,TH1D_SF*>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOTH1D_SFmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,TH1D_SF*>) );
      instance.SetNew(&new_maplEstringcOTH1D_SFmUgR);
      instance.SetNewArray(&newArray_maplEstringcOTH1D_SFmUgR);
      instance.SetDelete(&delete_maplEstringcOTH1D_SFmUgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOTH1D_SFmUgR);
      instance.SetDestructor(&destruct_maplEstringcOTH1D_SFmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,TH1D_SF*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,TH1D_SF*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOTH1D_SFmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,TH1D_SF*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOTH1D_SFmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,TH1D_SF*> : new map<string,TH1D_SF*>;
   }
   static void *newArray_maplEstringcOTH1D_SFmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,TH1D_SF*>[nElements] : new map<string,TH1D_SF*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOTH1D_SFmUgR(void *p) {
      delete ((map<string,TH1D_SF*>*)p);
   }
   static void deleteArray_maplEstringcOTH1D_SFmUgR(void *p) {
      delete [] ((map<string,TH1D_SF*>*)p);
   }
   static void destruct_maplEstringcOTH1D_SFmUgR(void *p) {
      typedef map<string,TH1D_SF*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,TH1D_SF*>

namespace ROOT {
   void maplEstringcOTH2D_SFmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOTH2D_SFmUgR_Dictionary();
   static void *new_maplEstringcOTH2D_SFmUgR(void *p = 0);
   static void *newArray_maplEstringcOTH2D_SFmUgR(Long_t size, void *p);
   static void delete_maplEstringcOTH2D_SFmUgR(void *p);
   static void deleteArray_maplEstringcOTH2D_SFmUgR(void *p);
   static void destruct_maplEstringcOTH2D_SFmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,TH2D_SF*>*)
   {
      map<string,TH2D_SF*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,TH2D_SF*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,TH2D_SF*>", -2, "/opt/local/lib/root/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,TH2D_SF*>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOTH2D_SFmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,TH2D_SF*>) );
      instance.SetNew(&new_maplEstringcOTH2D_SFmUgR);
      instance.SetNewArray(&newArray_maplEstringcOTH2D_SFmUgR);
      instance.SetDelete(&delete_maplEstringcOTH2D_SFmUgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOTH2D_SFmUgR);
      instance.SetDestructor(&destruct_maplEstringcOTH2D_SFmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,TH2D_SF*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,TH2D_SF*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOTH2D_SFmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,TH2D_SF*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOTH2D_SFmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,TH2D_SF*> : new map<string,TH2D_SF*>;
   }
   static void *newArray_maplEstringcOTH2D_SFmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,TH2D_SF*>[nElements] : new map<string,TH2D_SF*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOTH2D_SFmUgR(void *p) {
      delete ((map<string,TH2D_SF*>*)p);
   }
   static void deleteArray_maplEstringcOTH2D_SFmUgR(void *p) {
      delete [] ((map<string,TH2D_SF*>*)p);
   }
   static void destruct_maplEstringcOTH2D_SFmUgR(void *p) {
      typedef map<string,TH2D_SF*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,TH2D_SF*>

namespace ROOT {
   void maplEstringcOTH3D_SFmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOTH3D_SFmUgR_Dictionary();
   static void *new_maplEstringcOTH3D_SFmUgR(void *p = 0);
   static void *newArray_maplEstringcOTH3D_SFmUgR(Long_t size, void *p);
   static void delete_maplEstringcOTH3D_SFmUgR(void *p);
   static void deleteArray_maplEstringcOTH3D_SFmUgR(void *p);
   static void destruct_maplEstringcOTH3D_SFmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,TH3D_SF*>*)
   {
      map<string,TH3D_SF*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,TH3D_SF*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,TH3D_SF*>", -2, "/opt/local/lib/root/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,TH3D_SF*>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOTH3D_SFmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,TH3D_SF*>) );
      instance.SetNew(&new_maplEstringcOTH3D_SFmUgR);
      instance.SetNewArray(&newArray_maplEstringcOTH3D_SFmUgR);
      instance.SetDelete(&delete_maplEstringcOTH3D_SFmUgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOTH3D_SFmUgR);
      instance.SetDestructor(&destruct_maplEstringcOTH3D_SFmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,TH3D_SF*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,TH3D_SF*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOTH3D_SFmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,TH3D_SF*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOTH3D_SFmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,TH3D_SF*> : new map<string,TH3D_SF*>;
   }
   static void *newArray_maplEstringcOTH3D_SFmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,TH3D_SF*>[nElements] : new map<string,TH3D_SF*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOTH3D_SFmUgR(void *p) {
      delete ((map<string,TH3D_SF*>*)p);
   }
   static void deleteArray_maplEstringcOTH3D_SFmUgR(void *p) {
      delete [] ((map<string,TH3D_SF*>*)p);
   }
   static void destruct_maplEstringcOTH3D_SFmUgR(void *p) {
      typedef map<string,TH3D_SF*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,TH3D_SF*>

namespace ROOT {
   void vectorlETGCompositeFramemUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETGCompositeFramemUgR_Dictionary();
   static void *new_vectorlETGCompositeFramemUgR(void *p = 0);
   static void *newArray_vectorlETGCompositeFramemUgR(Long_t size, void *p);
   static void delete_vectorlETGCompositeFramemUgR(void *p);
   static void deleteArray_vectorlETGCompositeFramemUgR(void *p);
   static void destruct_vectorlETGCompositeFramemUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TGCompositeFrame*>*)
   {
      vector<TGCompositeFrame*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TGCompositeFrame*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TGCompositeFrame*>", -2, "/opt/local/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TGCompositeFrame*>), DefineBehavior(ptr, ptr),
                  0, &vectorlETGCompositeFramemUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TGCompositeFrame*>) );
      instance.SetNew(&new_vectorlETGCompositeFramemUgR);
      instance.SetNewArray(&newArray_vectorlETGCompositeFramemUgR);
      instance.SetDelete(&delete_vectorlETGCompositeFramemUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETGCompositeFramemUgR);
      instance.SetDestructor(&destruct_vectorlETGCompositeFramemUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TGCompositeFrame*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TGCompositeFrame*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETGCompositeFramemUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TGCompositeFrame*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETGCompositeFramemUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TGCompositeFrame*> : new vector<TGCompositeFrame*>;
   }
   static void *newArray_vectorlETGCompositeFramemUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TGCompositeFrame*>[nElements] : new vector<TGCompositeFrame*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETGCompositeFramemUgR(void *p) {
      delete ((vector<TGCompositeFrame*>*)p);
   }
   static void deleteArray_vectorlETGCompositeFramemUgR(void *p) {
      delete [] ((vector<TGCompositeFrame*>*)p);
   }
   static void destruct_vectorlETGCompositeFramemUgR(void *p) {
      typedef vector<TGCompositeFrame*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TGCompositeFrame*>

namespace ROOT {
   void vectorlETRootEmbeddedCanvasmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETRootEmbeddedCanvasmUgR_Dictionary();
   static void *new_vectorlETRootEmbeddedCanvasmUgR(void *p = 0);
   static void *newArray_vectorlETRootEmbeddedCanvasmUgR(Long_t size, void *p);
   static void delete_vectorlETRootEmbeddedCanvasmUgR(void *p);
   static void deleteArray_vectorlETRootEmbeddedCanvasmUgR(void *p);
   static void destruct_vectorlETRootEmbeddedCanvasmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TRootEmbeddedCanvas*>*)
   {
      vector<TRootEmbeddedCanvas*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TRootEmbeddedCanvas*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TRootEmbeddedCanvas*>", -2, "/opt/local/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TRootEmbeddedCanvas*>), DefineBehavior(ptr, ptr),
                  0, &vectorlETRootEmbeddedCanvasmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TRootEmbeddedCanvas*>) );
      instance.SetNew(&new_vectorlETRootEmbeddedCanvasmUgR);
      instance.SetNewArray(&newArray_vectorlETRootEmbeddedCanvasmUgR);
      instance.SetDelete(&delete_vectorlETRootEmbeddedCanvasmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETRootEmbeddedCanvasmUgR);
      instance.SetDestructor(&destruct_vectorlETRootEmbeddedCanvasmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TRootEmbeddedCanvas*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TRootEmbeddedCanvas*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETRootEmbeddedCanvasmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TRootEmbeddedCanvas*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETRootEmbeddedCanvasmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TRootEmbeddedCanvas*> : new vector<TRootEmbeddedCanvas*>;
   }
   static void *newArray_vectorlETRootEmbeddedCanvasmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TRootEmbeddedCanvas*>[nElements] : new vector<TRootEmbeddedCanvas*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETRootEmbeddedCanvasmUgR(void *p) {
      delete ((vector<TRootEmbeddedCanvas*>*)p);
   }
   static void deleteArray_vectorlETRootEmbeddedCanvasmUgR(void *p) {
      delete [] ((vector<TRootEmbeddedCanvas*>*)p);
   }
   static void destruct_vectorlETRootEmbeddedCanvasmUgR(void *p) {
      typedef vector<TRootEmbeddedCanvas*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TRootEmbeddedCanvas*>

namespace ROOT {
   void vectorlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEstringgR_Dictionary();
   static void *new_vectorlEstringgR(void *p = 0);
   static void *newArray_vectorlEstringgR(Long_t size, void *p);
   static void delete_vectorlEstringgR(void *p);
   static void deleteArray_vectorlEstringgR(void *p);
   static void destruct_vectorlEstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<string>*)
   {
      vector<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<string>", -2, "/opt/local/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<string>), DefineBehavior(ptr, ptr),
                  0, &vectorlEstringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<string>) );
      instance.SetNew(&new_vectorlEstringgR);
      instance.SetNewArray(&newArray_vectorlEstringgR);
      instance.SetDelete(&delete_vectorlEstringgR);
      instance.SetDeleteArray(&deleteArray_vectorlEstringgR);
      instance.SetDestructor(&destruct_vectorlEstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string> : new vector<string>;
   }
   static void *newArray_vectorlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string>[nElements] : new vector<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstringgR(void *p) {
      delete ((vector<string>*)p);
   }
   static void deleteArray_vectorlEstringgR(void *p) {
      delete [] ((vector<string>*)p);
   }
   static void destruct_vectorlEstringgR(void *p) {
      typedef vector<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<string>

/********************************************************
* rbgui/HistDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableHistDict();

extern "C" void G__set_cpp_environmentHistDict() {
  G__cpp_reset_tagtableHistDict();
}
#include <new>
extern "C" int G__cpp_dllrevHistDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HistMaker */
static int G__HistDict_731_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HistMaker*) G__getstructoffset())->GetListOfSignals());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HistMaker*) G__getstructoffset())->Connect((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (void*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((HistMaker*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HistMaker*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HistMaker*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HistMaker*) G__getstructoffset())->Disconnect());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HistMaker*) G__getstructoffset())->HighPriority((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HistMaker*) G__getstructoffset())->HighPriority((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HistMaker*) G__getstructoffset())->LowPriority((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HistMaker*) G__getstructoffset())->LowPriority((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax];
   double dval[dmax];
   union { G__int64 lval; double dval; } u[umax];
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("EmitVA: more than 56 var args\n");
   }
      ((HistMaker*) G__getstructoffset())->EmitVA((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[3], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long64_t) G__Longlong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Char_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Destroyed();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->ChangedBy((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->Message((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HistMaker* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HistMaker(
(TGWindow*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) HistMaker(
(TGWindow*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HistDictLN_HistMaker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->DoTab((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->MakeParamDropDown((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->HandleTreeMenuX((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->HandleTreeMenuY((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->HandleTreeMenuZ((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((HistMaker*) G__getstructoffset())->MakePopupFromBranch((TBranchObject*) G__int(libp->para[0]), (TGPopupMenu*) G__int(libp->para[1])
, (vector<std::string>*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (string*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HistMaker*) G__getstructoffset())->MakePopupFromBranch((TBranchObject*) G__int(libp->para[0]), (TGPopupMenu*) G__int(libp->para[1])
, (vector<std::string>*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HistMaker*) G__getstructoffset())->MakePopupFromBranch((TBranchObject*) G__int(libp->para[0]), (TGPopupMenu*) G__int(libp->para[1])
, (vector<std::string>*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) ((HistMaker*) G__getstructoffset())->MakePopupFromTree((TTree*) G__int(libp->para[0]), (TGMenuBar*) G__int(libp->para[1])
, (vector<std::string>*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (string*) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((HistMaker*) G__getstructoffset())->MakePopupFromTree((TTree*) G__int(libp->para[0]), (TGMenuBar*) G__int(libp->para[1])
, (vector<std::string>*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((HistMaker*) G__getstructoffset())->MakePopupFromTree((TTree*) G__int(libp->para[0]), (TGMenuBar*) G__int(libp->para[1])
, (vector<std::string>*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->GenerateTreePopups((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->MakeHistFromGui();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 18:
      ((HistMaker*) G__getstructoffset())->MakeHist(
(TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (const char*) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (const char*) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]), (Bool_t) G__int(libp->para[17]));
      G__setnull(result7);
      break;
   case 17:
      ((HistMaker*) G__getstructoffset())->MakeHist(
(TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (const char*) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (const char*) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]));
      G__setnull(result7);
      break;
   case 16:
      ((HistMaker*) G__getstructoffset())->MakeHist(
(TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (const char*) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (const char*) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Double_t) G__double(libp->para[15]));
      G__setnull(result7);
      break;
   case 15:
      ((HistMaker*) G__getstructoffset())->MakeHist(
(TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (const char*) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (const char*) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]));
      G__setnull(result7);
      break;
   case 14:
      ((HistMaker*) G__getstructoffset())->MakeHist(
(TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (const char*) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (const char*) G__int(libp->para[13]));
      G__setnull(result7);
      break;
   case 13:
      ((HistMaker*) G__getstructoffset())->MakeHist(
(TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (const char*) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]));
      G__setnull(result7);
      break;
   case 12:
      ((HistMaker*) G__getstructoffset())->MakeHist(
(TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (const char*) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11]));
      G__setnull(result7);
      break;
   case 11:
      ((HistMaker*) G__getstructoffset())->MakeHist(
(TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (const char*) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]));
      G__setnull(result7);
      break;
   case 10:
      ((HistMaker*) G__getstructoffset())->MakeHist(
(TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (const char*) G__int(libp->para[9]));
      G__setnull(result7);
      break;
   case 9:
      ((HistMaker*) G__getstructoffset())->MakeHist(
(TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((HistMaker*) G__getstructoffset())->MakeHist(
(TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((HistMaker*) G__getstructoffset())->MakeHist(
(TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((HistMaker*) G__getstructoffset())->MakeHist((TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((HistMaker*) G__getstructoffset())->MakeHist((TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HistMaker*) G__getstructoffset())->MakeHist((TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->DoTypeRadio();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->DoFillRadio();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->DoInvalidCheck();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->DoTextEntry((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistMaker*) G__getstructoffset())->ClearName(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((HistMaker*) G__getstructoffset())->ProcessFinalName((string*) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_731_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HistMaker*) G__getstructoffset())->IsArray(*((string*) G__int(libp->para[0])), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HistMaker G__THistMaker;
static int G__HistDict_731_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HistMaker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HistMaker*) (soff+(sizeof(HistMaker)*i)))->~G__THistMaker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HistMaker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HistMaker*) (soff))->~G__THistMaker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HistViewer */
static int G__HistDict_732_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HistViewer*) G__getstructoffset())->GetListOfSignals());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HistViewer*) G__getstructoffset())->Connect((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (void*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((HistViewer*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HistViewer*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HistViewer*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HistViewer*) G__getstructoffset())->Disconnect());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HistViewer*) G__getstructoffset())->HighPriority((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HistViewer*) G__getstructoffset())->HighPriority((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HistViewer*) G__getstructoffset())->LowPriority((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HistViewer*) G__getstructoffset())->LowPriority((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax];
   double dval[dmax];
   union { G__int64 lval; double dval; } u[umax];
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("EmitVA: more than 56 var args\n");
   }
      ((HistViewer*) G__getstructoffset())->EmitVA((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[3], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long64_t) G__Longlong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Char_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Destroyed();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->ChangedBy((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->Message((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HistViewer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HistViewer(
(TGWindow*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (HistMaker*) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) HistViewer(
(TGWindow*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (HistMaker*) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HistDictLN_HistViewer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HistViewer*) G__getstructoffset())->createtab((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HistViewer*) G__getstructoffset())->createtab();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->DoTab((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->HandleAttachMenu((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->DoHistSelect();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->HandleHistSelectMenu((TGFrame*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_732_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistViewer*) G__getstructoffset())->DoTextEntry((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HistViewer G__THistViewer;
static int G__HistDict_732_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HistViewer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HistViewer*) (soff+(sizeof(HistViewer)*i)))->~G__THistViewer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HistViewer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HistViewer*) (soff))->~G__THistViewer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TH1D_SF */
static int G__HistDict_822_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TH1D_SF*) G__getstructoffset())->FillFromBranch());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__HistDict_822_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TH1D_SF *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TH1D_SF[n];
     } else {
       p = new((void*) gvp) TH1D_SF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TH1D_SF;
     } else {
       p = new((void*) gvp) TH1D_SF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HistDictLN_TH1D_SF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__HistDict_822_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TH1D_SF* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TH1D_SF(*(TH1D_SF*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HistDictLN_TH1D_SF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TH1D_SF G__TTH1D_SF;
static int G__HistDict_822_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TH1D_SF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TH1D_SF*) (soff+(sizeof(TH1D_SF)*i)))->~G__TTH1D_SF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TH1D_SF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TH1D_SF*) (soff))->~G__TTH1D_SF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__HistDict_822_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TH1D_SF* dest = (TH1D_SF*) G__getstructoffset();
   *dest = *(TH1D_SF*) libp->para[0].ref;
   const TH1D_SF& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TH2D_SF */
static int G__HistDict_830_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TH2D_SF*) G__getstructoffset())->FillFromBranch());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__HistDict_830_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TH2D_SF *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TH2D_SF[n];
     } else {
       p = new((void*) gvp) TH2D_SF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TH2D_SF;
     } else {
       p = new((void*) gvp) TH2D_SF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HistDictLN_TH2D_SF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__HistDict_830_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TH2D_SF* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TH2D_SF(*(TH2D_SF*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HistDictLN_TH2D_SF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TH2D_SF G__TTH2D_SF;
static int G__HistDict_830_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TH2D_SF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TH2D_SF*) (soff+(sizeof(TH2D_SF)*i)))->~G__TTH2D_SF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TH2D_SF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TH2D_SF*) (soff))->~G__TTH2D_SF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__HistDict_830_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TH2D_SF* dest = (TH2D_SF*) G__getstructoffset();
   *dest = *(TH2D_SF*) libp->para[0].ref;
   const TH2D_SF& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TH3D_SF */
static int G__HistDict_838_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TH3D_SF*) G__getstructoffset())->FillFromBranch());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__HistDict_838_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TH3D_SF *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TH3D_SF[n];
     } else {
       p = new((void*) gvp) TH3D_SF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TH3D_SF;
     } else {
       p = new((void*) gvp) TH3D_SF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HistDictLN_TH3D_SF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__HistDict_838_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TH3D_SF* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TH3D_SF(*(TH3D_SF*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HistDictLN_TH3D_SF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TH3D_SF G__TTH3D_SF;
static int G__HistDict_838_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TH3D_SF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TH3D_SF*) (soff+(sizeof(TH3D_SF)*i)))->~G__TTH3D_SF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TH3D_SF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TH3D_SF*) (soff))->~G__TTH3D_SF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__HistDict_838_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TH3D_SF* dest = (TH3D_SF*) G__getstructoffset();
   *dest = *(TH3D_SF*) libp->para[0].ref;
   const TH3D_SF& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGLVEntry_mod */
static int G__HistDict_847_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGLVEntry_mod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGLVEntry_mod(
(TGLVContainer*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, *(TString*) libp->para[2].ref, (TGString**) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (Pixel_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TGLVEntry_mod(
(TGLVContainer*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, *(TString*) libp->para[2].ref, (TGString**) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (Pixel_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGLVEntry_mod(
(TGLVContainer*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, *(TString*) libp->para[2].ref, (TGString**) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TGLVEntry_mod(
(TGLVContainer*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, *(TString*) libp->para[2].ref, (TGString**) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGLVEntry_mod(
(TGLVContainer*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, *(TString*) libp->para[2].ref, (TGString**) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TGLVEntry_mod(
(TGLVContainer*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, *(TString*) libp->para[2].ref, (TGString**) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGLVEntry_mod(
(TGLVContainer*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, *(TString*) libp->para[2].ref);
     } else {
       p = new((void*) gvp) TGLVEntry_mod(
(TGLVContainer*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, *(TString*) libp->para[2].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HistDictLN_TGLVEntry_mod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_847_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 14:
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (const char*) G__int(libp->para[6]), (const char*) G__int(libp->para[7])
, (const char*) G__int(libp->para[8]), (const char*) G__int(libp->para[9])
, (const char*) G__int(libp->para[10]), (const char*) G__int(libp->para[11])
, (const char*) G__int(libp->para[12]), (const char*) G__int(libp->para[13]));
      G__setnull(result7);
      break;
   case 13:
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (const char*) G__int(libp->para[6]), (const char*) G__int(libp->para[7])
, (const char*) G__int(libp->para[8]), (const char*) G__int(libp->para[9])
, (const char*) G__int(libp->para[10]), (const char*) G__int(libp->para[11])
, (const char*) G__int(libp->para[12]));
      G__setnull(result7);
      break;
   case 12:
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (const char*) G__int(libp->para[6]), (const char*) G__int(libp->para[7])
, (const char*) G__int(libp->para[8]), (const char*) G__int(libp->para[9])
, (const char*) G__int(libp->para[10]), (const char*) G__int(libp->para[11]));
      G__setnull(result7);
      break;
   case 11:
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (const char*) G__int(libp->para[6]), (const char*) G__int(libp->para[7])
, (const char*) G__int(libp->para[8]), (const char*) G__int(libp->para[9])
, (const char*) G__int(libp->para[10]));
      G__setnull(result7);
      break;
   case 10:
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (const char*) G__int(libp->para[6]), (const char*) G__int(libp->para[7])
, (const char*) G__int(libp->para[8]), (const char*) G__int(libp->para[9]));
      G__setnull(result7);
      break;
   case 9:
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (const char*) G__int(libp->para[6]), (const char*) G__int(libp->para[7])
, (const char*) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (const char*) G__int(libp->para[6]), (const char*) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (const char*) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_847_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames(*(vector<std::string>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistDict_847_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGLVEntry_mod*) G__getstructoffset())->SetSubnames((rb::Hist*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGLVEntry_mod G__TTGLVEntry_mod;
static int G__HistDict_847_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGLVEntry_mod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGLVEntry_mod*) (soff+(sizeof(TGLVEntry_mod)*i)))->~G__TTGLVEntry_mod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGLVEntry_mod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGLVEntry_mod*) (soff))->~G__TTGLVEntry_mod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HistMaker */

/* HistViewer */

/* TH1D_SF */

/* TH2D_SF */

/* TH3D_SF */

/* TGLVEntry_mod */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncHistDict {
 public:
  G__Sizep2memfuncHistDict(): p(&G__Sizep2memfuncHistDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncHistDict::*p)();
};

size_t G__get_sizep2memfuncHistDict()
{
  G__Sizep2memfuncHistDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceHistDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HistDictLN_TGLVEntry_mod))) {
     TGLVEntry_mod *G__Lderived;
     G__Lderived=(TGLVEntry_mod*)0x1000;
     {
       TGLVEntry *G__Lpbase=(TGLVEntry*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HistDictLN_TGLVEntry_mod),G__get_linked_tagnum(&G__HistDictLN_TGLVEntry),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TGFrame *G__Lpbase=(TGFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HistDictLN_TGLVEntry_mod),G__get_linked_tagnum(&G__HistDictLN_TGFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGWindow *G__Lpbase=(TGWindow*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HistDictLN_TGLVEntry_mod),G__get_linked_tagnum(&G__HistDictLN_TGWindow),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGObject *G__Lpbase=(TGObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HistDictLN_TGLVEntry_mod),G__get_linked_tagnum(&G__HistDictLN_TGObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HistDictLN_TGLVEntry_mod),G__get_linked_tagnum(&G__HistDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TQObject *G__Lpbase=(TQObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HistDictLN_TGLVEntry_mod),G__get_linked_tagnum(&G__HistDictLN_TQObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableHistDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("ULong_t",107,-1,0,-1);
   G__setnewtype(-1,"Unsigned long integer 8 bytes (unsigned long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("ULong64_t",109,-1,0,-1);
   G__setnewtype(-1,"Portable unsigned long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__HistDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__HistDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HistDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__HistDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HistDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__HistDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__HistDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HistDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__HistDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HistDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Pixel_t",107,-1,0,-1);
   G__setnewtype(-1,"Pixel value",0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__HistDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__HistDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__HistDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__HistDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__HistDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__HistDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HistDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__HistDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HistDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__HistDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__HistDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__HistDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__HistDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__HistDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TGCompositeFrame*>",117,G__get_linked_tagnum(&G__HistDictLN_vectorlETGCompositeFramemUcOallocatorlETGCompositeFramemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__HistDictLN_reverse_iteratorlEvectorlETGCompositeFramemUcOallocatorlETGCompositeFramemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HistDictLN_vectorlETGCompositeFramemUcOallocatorlETGCompositeFramemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__HistDictLN_reverse_iteratorlEvectorlETGCompositeFramemUcOallocatorlETGCompositeFramemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HistDictLN_vectorlETGCompositeFramemUcOallocatorlETGCompositeFramemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TRootEmbeddedCanvas*>",117,G__get_linked_tagnum(&G__HistDictLN_vectorlETRootEmbeddedCanvasmUcOallocatorlETRootEmbeddedCanvasmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__HistDictLN_reverse_iteratorlEvectorlETRootEmbeddedCanvasmUcOallocatorlETRootEmbeddedCanvasmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HistDictLN_vectorlETRootEmbeddedCanvasmUcOallocatorlETRootEmbeddedCanvasmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__HistDictLN_reverse_iteratorlEvectorlETRootEmbeddedCanvasmUcOallocatorlETRootEmbeddedCanvasmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HistDictLN_vectorlETRootEmbeddedCanvasmUcOallocatorlETRootEmbeddedCanvasmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__HistDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__HistDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HistDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__HistDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HistDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__HistDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__HistDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__HistDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__HistDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HistDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__HistDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HistDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TTreeFormula*>",117,G__get_linked_tagnum(&G__HistDictLN_vectorlETTreeFormulamUcOallocatorlETTreeFormulamUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__HistDictLN_reverse_iteratorlEvectorlETTreeFormulamUcOallocatorlETTreeFormulamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HistDictLN_vectorlETTreeFormulamUcOallocatorlETTreeFormulamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__HistDictLN_reverse_iteratorlEvectorlETTreeFormulamUcOallocatorlETTreeFormulamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HistDictLN_vectorlETTreeFormulamUcOallocatorlETTreeFormulamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TH1D_SF*>",117,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTH1D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH1D_SFmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TH1D_SF*>",117,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTH1D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH1D_SFmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TH1D_SF*,less<string> >",117,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTH1D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH1D_SFmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TH1DMap",117,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTH1D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH1D_SFmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TH2D_SF*>",117,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTH2D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH2D_SFmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TH2D_SF*>",117,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTH2D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH2D_SFmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TH2D_SF*,less<string> >",117,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTH2D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH2D_SFmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TH2DMap",117,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTH2D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH2D_SFmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TH3D_SF*>",117,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTH3D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH3D_SFmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TH3D_SF*>",117,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTH3D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH3D_SFmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TH3D_SF*,less<string> >",117,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTH3D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH3D_SFmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TH3DMap",117,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTH3D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH3D_SFmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,std::string>",117,G__get_linked_tagnum(&G__HistDictLN_maplEintcOstringcOlesslEintgRcOallocatorlEpairlEconstsPintcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,string>",117,G__get_linked_tagnum(&G__HistDictLN_maplEintcOstringcOlesslEintgRcOallocatorlEpairlEconstsPintcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,string,less<int> >",117,G__get_linked_tagnum(&G__HistDictLN_maplEintcOstringcOlesslEintgRcOallocatorlEpairlEconstsPintcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HistMaker */
static void G__setup_memvarHistMaker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HistDictLN_HistMaker));
   { HistMaker *p; p=(HistMaker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HistDictLN_TQObjSender),-1,-1,4,"fQObject=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGListView),-1,-1,4,"histlist=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGLVContainer),-1,-1,4,"cont=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGMenuBar),-1,-1,4,"xmenubar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGMenuBar),-1,-1,4,"ymenubar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGMenuBar),-1,-1,4,"zmenubar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGPopupMenu),-1,-1,4,"xmenu=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGPopupMenu),-1,-1,4,"ymenu=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGPopupMenu),-1,-1,4,"zmenu=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGHorizontalFrame),-1,-1,4,"top=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGHorizontalFrame),-1,-1,4,"fbuttons=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGHorizontalFrame),-1,-1,4,"fcbuttons=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextButton),-1,-1,4,"loadFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextButton),-1,-1,4,"saveFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextButton),-1,-1,4,"create=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGLayoutHints),-1,-1,4,"fL3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGLayoutHints),-1,-1,4,"fL4=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGLayoutHints),-1,-1,4,"fL5=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGGroupFrame),-1,-1,4,"deffile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextEntry),-1,-1,4,"xptext=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextEntry),-1,-1,4,"yptext=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextEntry),-1,-1,4,"zptext=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextEntry),-1,-1,4,"binxtext=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextEntry),-1,-1,4,"binytext=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextEntry),-1,-1,4,"binztext=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextEntry),-1,-1,4,"loxtext=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextEntry),-1,-1,4,"loytext=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextEntry),-1,-1,4,"loztext=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextEntry),-1,-1,4,"hixtext=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextEntry),-1,-1,4,"hiytext=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextEntry),-1,-1,4,"hiztext=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextEntry),-1,-1,4,"histnametext=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTextEntry),-1,-1,4,"tgate=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,4,"namesx=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,4,"namesy=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,4,"namesz=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HistDictLN_maplEintcOstringcOlesslEintgRcOallocatorlEpairlEconstsPintcOstringgRsPgRsPgR),G__defined_typename("map<Int_t,std::string>"),-1,4,"fInfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"htype=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"hfilloption=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"bins[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"invalide=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"low[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"high[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HistDictLN_string),-1,-1,4,"px=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HistDictLN_string),-1,-1,4,"py=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HistDictLN_string),-1,-1,4,"pz=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HistDictLN_string),-1,-1,4,"hname=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HistDictLN_string),-1,-1,4,"hgate=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMain)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGMainFrame),-1,-1,1,"fMain=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fView)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__HistDictLN_HistViewer),-1,-1,1,"fView=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->h1ds)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTH1D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH1D_SFmUgRsPgRsPgR),G__defined_typename("TH1DMap"),-1,1,"h1ds=",0,"1d histograms");
   G__memvar_setup((void*)((long)(&p->h2ds)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTH2D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH2D_SFmUgRsPgRsPgR),G__defined_typename("TH2DMap"),-1,1,"h2ds=",0,"2d histograms");
   G__memvar_setup((void*)((long)(&p->h3ds)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__HistDictLN_maplEstringcOTH3D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH3D_SFmUgRsPgRsPgR),G__defined_typename("TH3DMap"),-1,1,"h3ds=",0,"3d histograms");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HistViewer */
static void G__setup_memvarHistViewer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HistDictLN_HistViewer));
   { HistViewer *p; p=(HistViewer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HistDictLN_TQObjSender),-1,-1,4,"fQObject=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGMainFrame),-1,-1,4,"fMain=",0,"main window");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_TGTab),-1,-1,4,"fTab=",0,"controls the tabs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HistDictLN_vectorlETGCompositeFramemUcOallocatorlETGCompositeFramemUgRsPgR),G__defined_typename("vector<TGCompositeFrame*>"),-1,4,"tabs=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HistDictLN_vectorlETRootEmbeddedCanvasmUcOallocatorlETRootEmbeddedCanvasmUgRsPgR),G__defined_typename("vector<TRootEmbeddedCanvas*>"),-1,4,"ecanvases=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HistDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,4,"availablehists=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"cindex=",0,"current tab / canvas index");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HistDictLN_HistMaker),-1,-1,4,"hmaker=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,4,"drawoption[500]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->infile)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__HistDictLN_TFile),-1,-1,1,"infile=",0,"possible input file");
   G__memvar_setup((void*)((long)(&p->intree)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__HistDictLN_TTree),-1,-1,1,"intree=",0,"possible input tree");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TH1D_SF */
static void G__setup_memvarTH1D_SF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HistDictLN_TH1D_SF));
   { TH1D_SF *p; p=(TH1D_SF*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->dataxp)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__HistDictLN_TBranchElement),-1,-1,1,"dataxp=",0,"pointer to where the data is coming from to fill");
   G__memvar_setup((void*)((long)(&p->ix)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ix=",0,"index for use in GetValue function (mainly");
   G__memvar_setup((void*)((long)(&p->gate)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"gate=",0,"pointer to TTreeFormula result (result of a gate");
   G__memvar_setup((void*)((long)(&p->hist)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__HistDictLN_TH1D),-1,-1,1,"hist=",0,"histogram to be filled. I chose to have a data");
   }
   G__tag_memvar_reset();
}


   /* TH2D_SF */
static void G__setup_memvarTH2D_SF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HistDictLN_TH2D_SF));
   { TH2D_SF *p; p=(TH2D_SF*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->dataxp)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__HistDictLN_TBranchElement),-1,-1,1,"dataxp=",0,"pointer to where the data is coming from to fill");
   G__memvar_setup((void*)((long)(&p->datayp)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__HistDictLN_TBranchElement),-1,-1,1,"datayp=",0,"pointer to where the data is coming from to fill");
   G__memvar_setup((void*)((long)(&p->ix)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ix=",0,"index for use in GetValue function (mainly");
   G__memvar_setup((void*)((long)(&p->iy)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iy=",0,"index for use in GetValue function (mainly");
   G__memvar_setup((void*)((long)(&p->gate)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"gate=",0,"pointer to TTreeFormula result (result of a gate");
   G__memvar_setup((void*)((long)(&p->hist)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__HistDictLN_TH2D),-1,-1,1,"hist=",0,"histogram to be filled. I chose to have a data");
   }
   G__tag_memvar_reset();
}


   /* TH3D_SF */
static void G__setup_memvarTH3D_SF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HistDictLN_TH3D_SF));
   { TH3D_SF *p; p=(TH3D_SF*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->dataxp)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__HistDictLN_TBranchElement),-1,-1,1,"dataxp=",0,"pointer to where the data is coming from to fill");
   G__memvar_setup((void*)((long)(&p->datayp)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__HistDictLN_TBranchElement),-1,-1,1,"datayp=",0,"pointer to where the data is coming from to fill");
   G__memvar_setup((void*)((long)(&p->datazp)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__HistDictLN_TBranchElement),-1,-1,1,"datazp=",0,"pointer to where the data is coming from to fill");
   G__memvar_setup((void*)((long)(&p->ix)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ix=",0,"index for use in GetValue function (mainly");
   G__memvar_setup((void*)((long)(&p->iy)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iy=",0,"index for use in GetValue function (mainly");
   G__memvar_setup((void*)((long)(&p->iz)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iz=",0,"index for use in GetValue function (mainly");
   G__memvar_setup((void*)((long)(&p->gate)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"gate=",0,"pointer to TTreeFormula result (result of a gate");
   G__memvar_setup((void*)((long)(&p->hist)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__HistDictLN_TH3D),-1,-1,1,"hist=",0,"histogram to be filled. I chose to have a data");
   }
   G__tag_memvar_reset();
}


   /* TGLVEntry_mod */
static void G__setup_memvarTGLVEntry_mod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HistDictLN_TGLVEntry_mod));
   { TGLVEntry_mod *p; p=(TGLVEntry_mod*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarHistDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHistMaker(void) {
   /* HistMaker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HistDictLN_HistMaker));
   G__memfunc_setup("GetListOfSignals",1602,G__HistDict_731_0_1, 85, G__get_linked_tagnum(&G__HistDictLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connect",714,G__HistDict_731_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - - 10 - sig C - - 10 - cl "
"Y - - 0 - rcvr C - - 10 - slt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Disconnect",1034,G__HistDict_731_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - - 10 '0' sig Y - - 0 '0' rcvr "
"C - - 10 '0' slt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HighPriority",1250,G__HistDict_731_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal_name C - - 10 '0' slot_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LowPriority",1172,G__HistDict_731_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal_name C - - 10 '0' slot_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EmitVA",550,G__HistDict_731_0_6, 121, -1, -1, 0, 2, 8, 1, 0, 
"C - - 10 - signal i - 'Int_t' 0 - nargs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_731_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - signal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_731_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal C - - 10 - params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_731_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal L - 'Long_t' 0 - paramArr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_731_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal d - 'Double_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_731_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal l - 'Long_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_731_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal n - 'Long64_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_731_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal m - 'ULong64_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_731_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal g - 'Bool_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_731_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal c - 'Char_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_731_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal b - 'UChar_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_731_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal s - 'Short_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_731_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal r - 'UShort_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_731_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal i - 'Int_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_731_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal h - 'UInt_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_731_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal k - 'ULong_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_731_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal f - 'Float_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Destroyed",947,G__HistDict_731_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangedBy",869,G__HistDict_731_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Message",709,G__HistDict_731_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - msg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInfo",684,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__HistDictLN_string), -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - indx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HistMaker",904,G__HistDict_731_0_27, 105, G__get_linked_tagnum(&G__HistDictLN_HistMaker), -1, 0, 3, 1, 1, 0, 
"U 'TGWindow' - 10 - p h - 'UInt_t' 0 - w "
"h - 'UInt_t' 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoTab",458,G__HistDict_731_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeParamDropDown",1692,G__HistDict_731_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HandleTreeMenuX",1481,G__HistDict_731_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HandleTreeMenuY",1482,G__HistDict_731_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HandleTreeMenuZ",1483,G__HistDict_731_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakePopupFromBranch",1908,G__HistDict_731_0_33, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'TBranchObject' - 0 - branch U 'TGPopupMenu' - 0 - menu "
"U 'vector<string,allocator<string> >' 'vector<std::string>' 0 - names i - 'Int_t' 0 '0' offset "
"U 'string' - 0 '0' currentname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakePopupFromTree",1718,G__HistDict_731_0_34, 85, G__get_linked_tagnum(&G__HistDictLN_TGPopupMenu), -1, 0, 6, 1, 1, 0, 
"U 'TTree' - 0 - t U 'TGMenuBar' - 0 - bar "
"U 'vector<string,allocator<string> >' 'vector<std::string>' 0 - names C - - 10 - menuname "
"i - 'Int_t' 0 '0' offset U 'string' - 0 '0' currentname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateTreePopups",1858,G__HistDict_731_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeHistFromGui",1487,G__HistDict_731_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeHist",790,G__HistDict_731_0_37, 121, -1, -1, 0, 18, 1, 1, 0, 
"U 'TTree' - 0 - t C - - 10 - hn "
"i - 'Int_t' 0 - ht i - 'Int_t' 0 - foptions "
"C - - 10 '\"\"' ngate C - - 10 '\"\"' parx "
"i - 'Int_t' 0 '0' bx d - 'Double_t' 0 '0' lx "
"d - 'Double_t' 0 '0' hx C - - 10 '\"\"' pary "
"i - 'Int_t' 0 '0' by d - 'Double_t' 0 '0' ly "
"d - 'Double_t' 0 '0' hy C - - 10 '\"\"' parz "
"i - 'Int_t' 0 '0' bz d - 'Double_t' 0 '0' lz "
"d - 'Double_t' 0 '0' hz g - 'Bool_t' 0 '\"FALSE\"' invalidevt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoTypeRadio",1092,G__HistDict_731_0_38, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoFillRadio",1065,G__HistDict_731_0_39, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoInvalidCheck",1368,G__HistDict_731_0_40, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoTextEntry",1130,G__HistDict_731_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearName",872,G__HistDict_731_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - hns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessFinalName",1610,G__HistDict_731_0_43, 117, G__get_linked_tagnum(&G__HistDictLN_string), -1, 0, 2, 1, 1, 0, 
"U 'string' - 0 - currentname u 'string' - 0 - flevelname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsArray",699,G__HistDict_731_0_44, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'string' - 0 - branchname I - 'Int_t' 0 - index1 "
"I - 'Int_t' 0 - index2", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HistMaker", 1030, G__HistDict_731_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHistViewer(void) {
   /* HistViewer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HistDictLN_HistViewer));
   G__memfunc_setup("GetListOfSignals",1602,G__HistDict_732_0_1, 85, G__get_linked_tagnum(&G__HistDictLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connect",714,G__HistDict_732_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - - 10 - sig C - - 10 - cl "
"Y - - 0 - rcvr C - - 10 - slt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Disconnect",1034,G__HistDict_732_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - - 10 '0' sig Y - - 0 '0' rcvr "
"C - - 10 '0' slt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HighPriority",1250,G__HistDict_732_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal_name C - - 10 '0' slot_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LowPriority",1172,G__HistDict_732_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal_name C - - 10 '0' slot_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EmitVA",550,G__HistDict_732_0_6, 121, -1, -1, 0, 2, 8, 1, 0, 
"C - - 10 - signal i - 'Int_t' 0 - nargs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_732_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - signal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_732_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal C - - 10 - params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_732_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal L - 'Long_t' 0 - paramArr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_732_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal d - 'Double_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_732_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal l - 'Long_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_732_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal n - 'Long64_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_732_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal m - 'ULong64_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_732_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal g - 'Bool_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_732_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal c - 'Char_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_732_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal b - 'UChar_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_732_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal s - 'Short_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_732_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal r - 'UShort_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_732_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal i - 'Int_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_732_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal h - 'UInt_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_732_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal k - 'ULong_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__HistDict_732_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal f - 'Float_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Destroyed",947,G__HistDict_732_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangedBy",869,G__HistDict_732_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Message",709,G__HistDict_732_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - msg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HistViewer",1034,G__HistDict_732_0_26, 105, G__get_linked_tagnum(&G__HistDictLN_HistViewer), -1, 0, 4, 1, 1, 0, 
"U 'TGWindow' - 10 - p h - 'UInt_t' 0 - w "
"h - 'UInt_t' 0 - h U 'HistMaker' - 0 - histmaker", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createtab",939,G__HistDict_732_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"tab\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoTab",458,G__HistDict_732_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HandleAttachMenu",1590,G__HistDict_732_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoHistSelect",1195,G__HistDict_732_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HandleHistSelectMenu",2009,G__HistDict_732_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TGFrame' - 0 - f i - 'Int_t' 0 - btn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoTextEntry",1130,G__HistDict_732_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - text", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HistViewer", 1160, G__HistDict_732_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTH1D_SF(void) {
   /* TH1D_SF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HistDictLN_TH1D_SF));
   G__memfunc_setup("FillFromBranch",1385,G__HistDict_822_0_1, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "fill from the datax branch reference", (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("TH1D_SF", 521, G__HistDict_822_0_2, (int) ('i'), G__get_linked_tagnum(&G__HistDictLN_TH1D_SF), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TH1D_SF", 521, G__HistDict_822_0_3, (int) ('i'), G__get_linked_tagnum(&G__HistDictLN_TH1D_SF), -1, 0, 1, 1, 1, 0, "u 'TH1D_SF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TH1D_SF", 647, G__HistDict_822_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__HistDict_822_0_5, (int) ('u'), G__get_linked_tagnum(&G__HistDictLN_TH1D_SF), -1, 1, 1, 1, 1, 0, "u 'TH1D_SF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTH2D_SF(void) {
   /* TH2D_SF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HistDictLN_TH2D_SF));
   G__memfunc_setup("FillFromBranch",1385,G__HistDict_830_0_1, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "fill from the datax branch reference", (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("TH2D_SF", 522, G__HistDict_830_0_2, (int) ('i'), G__get_linked_tagnum(&G__HistDictLN_TH2D_SF), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TH2D_SF", 522, G__HistDict_830_0_3, (int) ('i'), G__get_linked_tagnum(&G__HistDictLN_TH2D_SF), -1, 0, 1, 1, 1, 0, "u 'TH2D_SF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TH2D_SF", 648, G__HistDict_830_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__HistDict_830_0_5, (int) ('u'), G__get_linked_tagnum(&G__HistDictLN_TH2D_SF), -1, 1, 1, 1, 1, 0, "u 'TH2D_SF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTH3D_SF(void) {
   /* TH3D_SF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HistDictLN_TH3D_SF));
   G__memfunc_setup("FillFromBranch",1385,G__HistDict_838_0_1, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "fill from the datax branch reference", (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("TH3D_SF", 523, G__HistDict_838_0_2, (int) ('i'), G__get_linked_tagnum(&G__HistDictLN_TH3D_SF), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TH3D_SF", 523, G__HistDict_838_0_3, (int) ('i'), G__get_linked_tagnum(&G__HistDictLN_TH3D_SF), -1, 0, 1, 1, 1, 0, "u 'TH3D_SF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TH3D_SF", 649, G__HistDict_838_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__HistDict_838_0_5, (int) ('u'), G__get_linked_tagnum(&G__HistDictLN_TH3D_SF), -1, 1, 1, 1, 1, 0, "u 'TH3D_SF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGLVEntry_mod(void) {
   /* TGLVEntry_mod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HistDictLN_TGLVEntry_mod));
   G__memfunc_setup("TGLVEntry_mod",1262,G__HistDict_847_0_1, 105, G__get_linked_tagnum(&G__HistDictLN_TGLVEntry_mod), -1, 0, 6, 1, 1, 0, 
"U 'TGLVContainer' - 10 - p u 'TString' - 11 - name "
"u 'TString' - 11 - cname U 'TGString' - 2 '0' subnames "
"h - 'UInt_t' 0 'kChildFrame' options k - 'Pixel_t' 0 'GetWhitePixel()' back", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSubnames",1130,G__HistDict_847_0_2, 121, -1, -1, 0, 14, 1, 1, 0, 
"C - - 10 '\"\"' n1 C - - 10 '\"\"' n2 "
"C - - 10 '\"\"' n3 C - - 10 '\"\"' n4 "
"C - - 10 '\"\"' n5 C - - 10 '\"\"' n6 "
"C - - 10 '\"\"' n7 C - - 10 '\"\"' n8 "
"C - - 10 '\"\"' n9 C - - 10 '\"\"' n10 "
"C - - 10 '\"\"' n11 C - - 10 '\"\"' n12 "
"C - - 10 '\"\"' n13 C - - 10 '\"\"' n14", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSubnames",1130,G__HistDict_847_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<string,allocator<string> >' 'vector<std::string>' 11 - args", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSubnames",1130,G__HistDict_847_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'rb::Hist' - 0 - hst", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGLVEntry_mod", 1388, G__HistDict_847_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncHistDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"ATTACH_ONLINE=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"ATTACH_TFILE=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"ATTACH_TCHAIN=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"ATTACH_PIPE=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"D1=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"D2=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"D3=6",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"SUMMARY=7",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"SUMMATION=8",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"BITMASK=9",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"FILL_TREE=10",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"FILL_ONLINE=11",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"FILL_TREE_ONLINE=12",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"PARAM_X=13",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"PARAM_Y=14",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"PARAM_Z=15",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"BINS_X=16",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"BINS_Y=17",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"BINS_Z=18",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"LOW_X=19",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"LOW_Y=20",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"LOW_Z=21",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"HIGH_X=22",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"HIGH_Y=23",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"HIGH_Z=24",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"NAME=25",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"GATE=26",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HistDictLN_CommandIdentifiers),-1,-1,1,"DRAW_OPTION=27",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalHistDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcHistDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__HistDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__HistDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__HistDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__HistDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__HistDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__HistDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__HistDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TQObject = { "TQObject" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TQObjSender = { "TQObjSender" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TGObject = { "TGObject" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TGWindow = { "TGWindow" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TGFrame = { "TGFrame" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TGLayoutHints = { "TGLayoutHints" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TGString = { "TGString" , 99 , -1 };
G__linked_taginfo G__HistDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__HistDictLN_TGTextButton = { "TGTextButton" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TGHorizontalFrame = { "TGHorizontalFrame" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TGMainFrame = { "TGMainFrame" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TGGroupFrame = { "TGGroupFrame" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TBranchObject = { "TBranchObject" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TGPopupMenu = { "TGPopupMenu" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TGMenuBar = { "TGMenuBar" , 99 , -1 };
G__linked_taginfo G__HistDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TGTab = { "TGTab" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TGListView = { "TGListView" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TGTextEntry = { "TGTextEntry" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TBranchElement = { "TBranchElement" , 99 , -1 };
G__linked_taginfo G__HistDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__HistDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TH3D = { "TH3D" , 99 , -1 };
G__linked_taginfo G__HistDictLN_HistMaker = { "HistMaker" , 99 , -1 };
G__linked_taginfo G__HistDictLN_HistViewer = { "HistViewer" , 99 , -1 };
G__linked_taginfo G__HistDictLN_vectorlETGCompositeFramemUcOallocatorlETGCompositeFramemUgRsPgR = { "vector<TGCompositeFrame*,allocator<TGCompositeFrame*> >" , 99 , -1 };
G__linked_taginfo G__HistDictLN_reverse_iteratorlEvectorlETGCompositeFramemUcOallocatorlETGCompositeFramemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TGCompositeFrame*,allocator<TGCompositeFrame*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__HistDictLN_vectorlETRootEmbeddedCanvasmUcOallocatorlETRootEmbeddedCanvasmUgRsPgR = { "vector<TRootEmbeddedCanvas*,allocator<TRootEmbeddedCanvas*> >" , 99 , -1 };
G__linked_taginfo G__HistDictLN_reverse_iteratorlEvectorlETRootEmbeddedCanvasmUcOallocatorlETRootEmbeddedCanvasmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TRootEmbeddedCanvas*,allocator<TRootEmbeddedCanvas*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__HistDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__HistDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TGLVContainer = { "TGLVContainer" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TGLVEntry = { "TGLVEntry" , 99 , -1 };
G__linked_taginfo G__HistDictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__HistDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__HistDictLN_rb = { "rb" , 110 , -1 };
G__linked_taginfo G__HistDictLN_rbcLcLHist = { "rb::Hist" , 99 , -1 };
G__linked_taginfo G__HistDictLN_vectorlETTreeFormulamUcOallocatorlETTreeFormulamUgRsPgR = { "vector<TTreeFormula*,allocator<TTreeFormula*> >" , 99 , -1 };
G__linked_taginfo G__HistDictLN_reverse_iteratorlEvectorlETTreeFormulamUcOallocatorlETTreeFormulamUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TTreeFormula*,allocator<TTreeFormula*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TH1D_SF = { "TH1D_SF" , 99 , -1 };
G__linked_taginfo G__HistDictLN_maplEstringcOTH1D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH1D_SFmUgRsPgRsPgR = { "map<string,TH1D_SF*,less<string>,allocator<pair<const string,TH1D_SF*> > >" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TH2D_SF = { "TH2D_SF" , 99 , -1 };
G__linked_taginfo G__HistDictLN_maplEstringcOTH2D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH2D_SFmUgRsPgRsPgR = { "map<string,TH2D_SF*,less<string>,allocator<pair<const string,TH2D_SF*> > >" , 99 , -1 };
G__linked_taginfo G__HistDictLN_TH3D_SF = { "TH3D_SF" , 99 , -1 };
G__linked_taginfo G__HistDictLN_maplEstringcOTH3D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH3D_SFmUgRsPgRsPgR = { "map<string,TH3D_SF*,less<string>,allocator<pair<const string,TH3D_SF*> > >" , 99 , -1 };
G__linked_taginfo G__HistDictLN_CommandIdentifiers = { "CommandIdentifiers" , 101 , -1 };
G__linked_taginfo G__HistDictLN_TGLVEntry_mod = { "TGLVEntry_mod" , 99 , -1 };
G__linked_taginfo G__HistDictLN_maplEintcOstringcOlesslEintgRcOallocatorlEpairlEconstsPintcOstringgRsPgRsPgR = { "map<int,string,less<int>,allocator<pair<const int,string> > >" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableHistDict() {
  G__HistDictLN_TObject.tagnum = -1 ;
  G__HistDictLN_TString.tagnum = -1 ;
  G__HistDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__HistDictLN_string.tagnum = -1 ;
  G__HistDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__HistDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__HistDictLN_TList.tagnum = -1 ;
  G__HistDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__HistDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__HistDictLN_TQObject.tagnum = -1 ;
  G__HistDictLN_TQObjSender.tagnum = -1 ;
  G__HistDictLN_TGObject.tagnum = -1 ;
  G__HistDictLN_TGWindow.tagnum = -1 ;
  G__HistDictLN_TGFrame.tagnum = -1 ;
  G__HistDictLN_TGLayoutHints.tagnum = -1 ;
  G__HistDictLN_TGString.tagnum = -1 ;
  G__HistDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__HistDictLN_TGTextButton.tagnum = -1 ;
  G__HistDictLN_TGHorizontalFrame.tagnum = -1 ;
  G__HistDictLN_TGMainFrame.tagnum = -1 ;
  G__HistDictLN_TGGroupFrame.tagnum = -1 ;
  G__HistDictLN_TTree.tagnum = -1 ;
  G__HistDictLN_TFile.tagnum = -1 ;
  G__HistDictLN_TBranchObject.tagnum = -1 ;
  G__HistDictLN_TGPopupMenu.tagnum = -1 ;
  G__HistDictLN_TGMenuBar.tagnum = -1 ;
  G__HistDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__HistDictLN_TGTab.tagnum = -1 ;
  G__HistDictLN_TGListView.tagnum = -1 ;
  G__HistDictLN_TGTextEntry.tagnum = -1 ;
  G__HistDictLN_TBranchElement.tagnum = -1 ;
  G__HistDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__HistDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__HistDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__HistDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__HistDictLN_TH1D.tagnum = -1 ;
  G__HistDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__HistDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__HistDictLN_TH2D.tagnum = -1 ;
  G__HistDictLN_TH3D.tagnum = -1 ;
  G__HistDictLN_HistMaker.tagnum = -1 ;
  G__HistDictLN_HistViewer.tagnum = -1 ;
  G__HistDictLN_vectorlETGCompositeFramemUcOallocatorlETGCompositeFramemUgRsPgR.tagnum = -1 ;
  G__HistDictLN_reverse_iteratorlEvectorlETGCompositeFramemUcOallocatorlETGCompositeFramemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__HistDictLN_vectorlETRootEmbeddedCanvasmUcOallocatorlETRootEmbeddedCanvasmUgRsPgR.tagnum = -1 ;
  G__HistDictLN_reverse_iteratorlEvectorlETRootEmbeddedCanvasmUcOallocatorlETRootEmbeddedCanvasmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__HistDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__HistDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__HistDictLN_TGLVContainer.tagnum = -1 ;
  G__HistDictLN_TGLVEntry.tagnum = -1 ;
  G__HistDictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__HistDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__HistDictLN_rb.tagnum = -1 ;
  G__HistDictLN_rbcLcLHist.tagnum = -1 ;
  G__HistDictLN_vectorlETTreeFormulamUcOallocatorlETTreeFormulamUgRsPgR.tagnum = -1 ;
  G__HistDictLN_reverse_iteratorlEvectorlETTreeFormulamUcOallocatorlETTreeFormulamUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__HistDictLN_TH1D_SF.tagnum = -1 ;
  G__HistDictLN_maplEstringcOTH1D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH1D_SFmUgRsPgRsPgR.tagnum = -1 ;
  G__HistDictLN_TH2D_SF.tagnum = -1 ;
  G__HistDictLN_maplEstringcOTH2D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH2D_SFmUgRsPgRsPgR.tagnum = -1 ;
  G__HistDictLN_TH3D_SF.tagnum = -1 ;
  G__HistDictLN_maplEstringcOTH3D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH3D_SFmUgRsPgRsPgR.tagnum = -1 ;
  G__HistDictLN_CommandIdentifiers.tagnum = -1 ;
  G__HistDictLN_TGLVEntry_mod.tagnum = -1 ;
  G__HistDictLN_maplEintcOstringcOlesslEintgRcOallocatorlEpairlEconstsPintcOstringgRsPgRsPgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableHistDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__HistDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TString);
   G__get_linked_tagnum_fwd(&G__HistDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_string);
   G__get_linked_tagnum_fwd(&G__HistDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TList);
   G__get_linked_tagnum_fwd(&G__HistDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TQObject);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TQObjSender);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TGObject);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TGWindow);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TGFrame);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TGLayoutHints);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TGString);
   G__get_linked_tagnum_fwd(&G__HistDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TGTextButton);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TGHorizontalFrame);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TGMainFrame);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TGGroupFrame);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TBranchObject);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TGPopupMenu);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TGMenuBar);
   G__get_linked_tagnum_fwd(&G__HistDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TGTab);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TGListView);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TGTextEntry);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TBranchElement);
   G__get_linked_tagnum_fwd(&G__HistDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TH2D);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TH3D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HistDictLN_HistMaker),sizeof(HistMaker),-1,295936,(char*)NULL,G__setup_memvarHistMaker,G__setup_memfuncHistMaker);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HistDictLN_HistViewer),sizeof(HistViewer),-1,295936,(char*)NULL,G__setup_memvarHistViewer,G__setup_memfuncHistViewer);
   G__get_linked_tagnum_fwd(&G__HistDictLN_vectorlETGCompositeFramemUcOallocatorlETGCompositeFramemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_reverse_iteratorlEvectorlETGCompositeFramemUcOallocatorlETGCompositeFramemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_vectorlETRootEmbeddedCanvasmUcOallocatorlETRootEmbeddedCanvasmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_reverse_iteratorlEvectorlETRootEmbeddedCanvasmUcOallocatorlETRootEmbeddedCanvasmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TGLVContainer);
   G__get_linked_tagnum_fwd(&G__HistDictLN_TGLVEntry);
   G__get_linked_tagnum_fwd(&G__HistDictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_rb);
   G__get_linked_tagnum_fwd(&G__HistDictLN_rbcLcLHist);
   G__get_linked_tagnum_fwd(&G__HistDictLN_vectorlETTreeFormulamUcOallocatorlETTreeFormulamUgRsPgR);
   G__get_linked_tagnum_fwd(&G__HistDictLN_reverse_iteratorlEvectorlETTreeFormulamUcOallocatorlETTreeFormulamUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HistDictLN_TH1D_SF),sizeof(TH1D_SF),-1,262144,(char*)NULL,G__setup_memvarTH1D_SF,G__setup_memfuncTH1D_SF);
   G__get_linked_tagnum_fwd(&G__HistDictLN_maplEstringcOTH1D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH1D_SFmUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HistDictLN_TH2D_SF),sizeof(TH2D_SF),-1,262144,(char*)NULL,G__setup_memvarTH2D_SF,G__setup_memfuncTH2D_SF);
   G__get_linked_tagnum_fwd(&G__HistDictLN_maplEstringcOTH2D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH2D_SFmUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HistDictLN_TH3D_SF),sizeof(TH3D_SF),-1,262144,(char*)NULL,G__setup_memvarTH3D_SF,G__setup_memfuncTH3D_SF);
   G__get_linked_tagnum_fwd(&G__HistDictLN_maplEstringcOTH3D_SFmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTH3D_SFmUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HistDictLN_CommandIdentifiers),sizeof(int),-1,262144,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HistDictLN_TGLVEntry_mod),sizeof(TGLVEntry_mod),-1,323584,(char*)NULL,G__setup_memvarTGLVEntry_mod,G__setup_memfuncTGLVEntry_mod);
   G__get_linked_tagnum_fwd(&G__HistDictLN_maplEintcOstringcOlesslEintgRcOallocatorlEpairlEconstsPintcOstringgRsPgRsPgR);
}
extern "C" void G__cpp_setupHistDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupHistDict()");
  G__set_cpp_environmentHistDict();
  G__cpp_setup_tagtableHistDict();

  G__cpp_setup_inheritanceHistDict();

  G__cpp_setup_typetableHistDict();

  G__cpp_setup_memvarHistDict();

  G__cpp_setup_memfuncHistDict();
  G__cpp_setup_globalHistDict();
  G__cpp_setup_funcHistDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncHistDict();
  return;
}
class G__cpp_setup_initHistDict {
  public:
    G__cpp_setup_initHistDict() { G__add_setup_func("HistDict",(G__incsetup)(&G__cpp_setupHistDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initHistDict() { G__remove_setup_func("HistDict"); }
};
G__cpp_setup_initHistDict G__cpp_setup_initializerHistDict;

